---
import Layout from "../layouts/Layout.astro";

let entries = [
	{ subject: "About", brief: "Yannick!" },
	{
		subject: "Projects",
		brief: "Rust, Golang, HTML, Javascript, Python, CSS and more!",
	},
	{
		subject: "Extra",
		brief: "How to connect with me!",
	},
];
---

<script>
	function setPositionClass(items, position, className) {
		if (!(items instanceof HTMLCollection)) {
			throw new Error("Not an instanceof HTMLCollection");
		}
		if (position > items.length - 1) {
			return items;
		}

		if (position < 0) {
			return items;
		}
		items[position].className = className;
		return items;
	}

	function calcPosition(event, position) {
		if (!(event instanceof KeyboardEvent)) {
			return null;
		}

		// Counterintuitive because elements are listed in reverse
		if (event.key == "s") {
			return position + 1;
		}

		if (event.key == "w") {
			if (position == 0) return position;
			return position - 1;
		}
		return position;
	}
	function initIds(parent, IFS) {
		if (!(parent instanceof HTMLElement)) {
			throw new Error("Parent is not HTMLElement");
		}
		let children = parent.children;
		let counter = 0;
		for (let child of children) {
			child.id = `${counter}${IFS}${parent.id}`;
			counter += 1;
		}
		return children;
	}

	let position = 0;

	window.addEventListener("load", (event) => {
		let parent = document.getElementById("menu-options");
		let IFS = "-";
		let idKey = 0;
		initIds(parent, IFS);

		if (parent.children.length > 0) {
			setPositionClass(parent.children, 0, "activ");
		}

		for (let item of parent.children) {
			item.addEventListener("click", (event) => {
				console.log("I was clicked!", item.id);
				let index = Number(item.id.split(IFS)[idKey]);
				console.log(`${index} was clicked.`);
				setPositionClass(parent.children, position, "");
				position = index;
				setPositionClass(parent.children, position, "active");
			});
		}

		document.addEventListener("keypress", (event) => {
			setPositionClass(parent.children, position, "");
			position = calcPosition(event, position);
			position =
				position > parent.children.length - 1
					? parent.children.length - 1
					: Math.max(0, position);
			setPositionClass(parent.children, position, "active");
		});
	});
</script>

<Layout>
	<div id="shell">
		<h1>Yannick Dorn</h1>
		<div id="inner"></div>
		<ul id="menu-options">
			{entries.map((item) => <li>{item.subject}</li>)}
		</ul>

		<a href="https://github.com/gd0st">
			<p id="version-descriptor">v 0.1.0</p>
		</a>
	</div>
</Layout>

<style>
	#shell {
		border: 2px solid #102031;
		display: grid;
		font-family: "Orbitron";
	}
	.active {
		background-color: #12fe94;
		color: black;
	}

	li:hover,
	.active {
		border: 2px solid #12fe94;
	}
	h1 {
		color: #4deeff;
	}
	li {
		padding: 10px;
		list-style: none;
		border: 2px solid transparent;
		margin: 5px;
	}

	#version-descriptor:hover {
		color: #12fe94;
	}

	a {
		color: inherit;
		text-decoration: none;
	}

	#version-descriptor {
		text-align: right;
		margin-right: 2px;
	}
</style>
